{
    "sectiontitle-1": {
        "title": "How to interpret annealing results"
    },
    "paragraph-1": {
        "text": "The response from the quantum annealer is here! So let's look at how we can interpret the data packets. When Hamiltonians are sent to the annealer, the results look something like this:"
    },
    "image-1": {
        "asset": "assets/images/lessons/nqueens_results.png",
        "caption": "Quantum annealers use these number sequences to \"answer\" to a computational problem",
        "alttext": "Table with rows each containing sixteen binary numbers; second column is labeled energy, ranging from minus eight to minus six, third column labeled frequency, with the number in the first row being the highest by far."
    },
    "paragraph-2": {
        "text": "The table shows an excerpt from the measurement results, sorted from lowest to highest energy — which means that the **higher** a solution is in the table, the \"better\" it is. Each row contains the answer vector and, on the right, the frequency of how many times each of them was measured. At this point, it's still number salad; to understand whether the effort was worthwhile, the results need to be **interpreted** in context first."
    },
    "paragraph-3": {
        "text": "Let's take the top solution as an example: the entries of the answer matrix come back in the order we considered them in the original QUBO equation. So we write the values from top to bottom and from left to right back into the fields of the original grid (in this case, the chessboard) and replace each 1 with a queen. Ideally, in the 4 queens problem, that should be four pieces in total, otherwise there's something wrong with the QUBO problem."
    },
    "equation-1": {
        "tex": "\\vec{q}_A=\\begin{bmatrix}0&10&0&0&0&0&1&1&0&0&0&0&0&1&0\\end{bmatrix}",
        "alttext": "qₐ=[0,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0]"
    },
    "equation-2": {
        "tex": "\\Rightarrow\\begin{bmatrix}0&1&0&0\\\\0&0&0&1\\\\1&0&0&0\\\\0&0&1&0\\end{bmatrix}",
        "alttext": "⇒[[0,1,0,0],[0,0,0,1],[1,0,0,0],[0,0,1,0]]"
    },
    "image-2": {
        "asset": "assets/images/lessons/four_queens_problem.png",
        "caption": "This is how the above solution to the 4 queens problem looks on the chessboard",
        "alttext": "Chessboard of size four by four from bird's eye view with four queen pieces on B1, D2, A3 and C4."
    },
    "sectiontitle-2": {
        "title": "How big is the computing power?"
    },
    "paragraph-4": {
        "text": "The first important step is done. For this course, however, we want to go a little further and explore where the **limits** of quantum computing lie. When it comes to evaluating the performance of quantum algorithms, this is often challenging because this method is **nondeterministic** by nature. This means that due to working with quantum states, there is always a certain amount of randomness involved. Therefore, in the first experiment, 2000 measurements are made for each of the 4 queens problem to the 8 queens problem and compared to see how many of the solutions were correct and how many were not. For comparison, the experiment is also repeated on the DWave 2000Q, the previous model of the current generation."
    },
    "interactive-1": {
        
    },
    "interactive-2": {

    },
    "paragraph-5": {
        "text": "Scrolling through the diagrams, the drop in performance with each new queen added is clearly visible. While the quantum annealers are correct in almost half of their measurements for the 4 queens problem, only one out of 2000 solutions are correct for larger checkerboards. For the DWave Advantage, this performance limit is 8 queens, and for the 2000Q model (which is generally incorrect more often than its successor), it is 7 queens."
    },
    "paragraph-6": {
        "text": "The same optimization problem was also solved on a conventional computer using the widely known \"simulated annealing\" algorithm. How it works is not relevant and beyond the scope of the course, but here is a visual representation of how long it took each of the two types of computers:"
    },
    "image-3": {
        "asset": "assets/images/lessons/runtime_comparison.png",
        "caption": "The volumes of the cubes represent the time it took the two types of computers to solve the N queens problem",
        "alttext": "Three small cubes that are the same size and are labeled N equals four, N equals six, and N equals eight. Below them are three large cubes that get larger and larger with the same label."
    },
    "paragraph-7": {
        "text": "These experiments immediately show the disadvantage of traditional computational methods: the time required for optimization is very long (here mostly over 10 minutes) and, most importantly, **increases with larger problems**. The quantum annealer, on the other hand, is able to solve the same tasks in fractions of a second, and **independent of problem size**."
    },
    "paragraph-8": {
        "text": "Although the unbeatable speed of the quantum-based approach makes it very attractive, it has major limitations performance-wise. A general rule of thumb is that, depending on embedding and couplings thereby employed, approximately $$n^2$$ physical qubits are needed to implement $$n$$ logical qubits. The Advantage has 5627 qubits; since each N queens problem becomes a Hamiltonian of size N², the theoretical maximum power is calculated to be **8 queens**."
    },
    "equation-3": {
        "tex": "\\sqrt[4]{5627}\\approx8.66",
        "alttext": "4√5627≈8.66"
    }
}