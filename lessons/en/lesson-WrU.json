{
    "sectiontitle-1": {
        "title": "How quantum annealers speak"
    },
    "paragraph-1": {
        "text": "Suppose you have a concrete problem in mind - how do you make it understandable to a quantum computer? Now it's a matter of bringing optimization problems to the annealer. Just as classical computers must be programmed to execute instructions in code, optimization problems must be translated into a suitable \"language\" for the quantum annealer to understand - in this case, the language of mathematics."
    },
    "paragraph-2": {
        "text": "In order for the annealer to solve a task, it must be formulated as a **quadratic unconstrained binary optimization problem**, or **QUBO problem** for short. This name is not particularly helpful at first, but it represents a core concept in quantum computing. So here are some explanations:"
    },
    "paragraph-3": {
        "text": "- **Quadratic** means that at most two variables can be multiplied together.\n- **Unconstrained** means that the correct answer is not constrained by other conditions.\n- **Binary** means that we can only enter 0 or 1.\n- **Optimization** is — we recall previous lessons — the process of finding the optimal solution to a complex problem by approximation."
    },
    "paragraph-4": {
        "text": "Note that there are other ways to program a quantum annealer, such as Ising problems, which we will omit for brevity and clarity. But now back to QUBO problems; let's consider an example to illustrate the concept:"
    },
    "image-1": {
        "asset": "checkers_board.png",
        "caption": "An example checkers board with game pieces",
        "alttext": "An illustrated two by two red and black checkers board with four fields from bird's eye view, labeled from the upper left with the letters a, b, c, and d; above, four black counters."
    },
    "paragraph-5": {
        "text": "This checkers board of size 2×2 has the four squares a, b, c and d. In addition, there are four pieces, each of which can, but doesn't have to be placed on any field (but not more than one on the same field). If a square is occupied, it is represented as 1, otherwise as 0. The quantum computer is supposed to place the pieces so that **as many fields as possible are occupied**. Here the cost functions come into play again to evaluate how good a particular solution is: the lower the cost, the better. Thus, finding the best solution boils down to minimizing the cost function. If we have a QUBO problem that takes four variables a, b, c, and d (which are either 0 or 1) as input, the cost function is defined as follows:"
    },
    "equation-1": {
        "tex": "f\\left(a,b,c,d\\right)=h_aa+h_bb+h_cc+h_dd+h_{ab}ab+h_{ac}ac+h_{ad}ad+h_{bc}bc+h_{bd}bd+h_{cd}cd",
        "alttext": "f(a,b,c,d)=ha×a + hb×b + hc×c + hd×d + hab×a×b + hac×a×c + had×a×d + hbc×b×c + hbd×b×d + hcd×c×d"
    },
    "paragraph-6": {
        "text": "First we sum the values of all the fields, then we add the product of every possible pair of the field values. The $$h$$ by which the field values are multiplied are simple coefficients, i.e. positive or negative numbers that control how much we want to reward (or punish) each occupancy. This is a pretty clever system: if a field is unoccupied, i.e. 0, the corresponding coefficient is removed from the equation (because multiplication by 0 always results in 0)."
    },
    "paragraph-7": {
        "text": "Similar is the case with the field pairs: A reward remains in the equation only if both fields are 1 (If even one member in the product is 0, the result of the product is 0). Since we are looking for the lowest cost, $$h < 0$$ means \"reward\", $$h > 0$$ \"penalty\", and $$h = 0$$ \"irrelevant\". Example: If field a is to be occupied at all costs, it should have an h of say -10, or if we want to prevent b and c from being occupied at the same time, h should be a high positive number like 25."
    },
    "sectiontitle-2": {
        "title": "A few examples"
    },
    "paragraph-8": {
        "text": "Now we can define a QUBO problem for our original task: We want **as many fields as possible** to be occupied."
    },
    "equation-2": {
        "tex": "f\\left(a,b,c,d\\right)=(-1)\\times a+(-1)\\times b+(-1)\\times c+(-1)\\times d=-a-b-c-d",
        "alttext": "f(a,b,c,d)=-1×a + -1×b + -1×c + -1×d = -a-b-c-d"
    },
    "paragraph-9": {
        "text": "We can dispense with specifying the coeffitients of pairs of fields, since the relationships between fields are irrelevant to this problem. This is a valid cost function because the lowest cost, namely -4, is achieved only when all fields are 1. Let's add the following condition to our problem: Fields a and b must not be occupied at the same time."
    },
    "equation-3": {
        "tex": "f\\left(a,b,c,d\\right)=-a-b-c-d+4ab",
        "alttext": "f(a,b,c,d)=-a-b-c-d+4×a×b"
    },
    "paragraph-10": {
        "text": "If a and b are both 1, the cost is 0 even if all the squares for the maximum reward are occupied, which means that the solution is worse than all other possible solutions. So the best achievable cost here is -3, which yields the correct solution. Another practical strategy in QUBO problems is **squaring**, for example in the task \"Exactly two out of four squares should be occupied\":"
    },
    "equation-4": {
        "tex": "f\\left(a,b,c,d\\right)=\\left(a+b+c+d-2\\right)^2=a^2+2ab+2ac+2ad-4a+b^2+2bc+2bd-4b+c^2+2cd-4c+d^2-4d+4=-3a-3b-3c-3d+2ab+2ac+2ad+2bc+2bd+2cd",
        "alttext": "f(a,b,c,d)=(a+b+c+d)²=a²+2ab+2ac+2ad-4a+b²+2bc+2bd-4b+c²+2cd-4c+d²-4d=-3a-3b-3c-3d+2ab+2ac+2ad+2bc+2bd+2cd"
    },
    "paragraph-11": {
        "text": "This works because when summing all fields and subtracting 2, the result is 0 when exactly two fields are 1. But: if no field or one field is occupied, the result would be negative, which would result in an even better cost. This can be remedied by squaring the equation, because squaring a negative number always results in a positive value. The following graphical representation shows what squaring does:"
    },
    "image-2": {
        "asset": "quadratic_qubo.png",
        "caption": "Squaring produces a characteristic parabola, which has its vertex (lowest point) at the optimal solution",
        "alttext": "Parabolic curve opened upward in the coordinate system; number of occupancies on the x-axis, cost on the y-axis; lowest point marked with an arrow and labeled minimum."
    },
    "paragraph-12": {
        "text": "The squared variables like a², b², etc., which result from multiplying out the equation, would actually not be allowed (since they violate the rules of QUBO), but since in the case of binary numbers $$x^2=x$$ holds, they can be replaced by a, b, etc. Also, constants like +4 can be omitted, since they only shift all results up or down by the same amount. We can verify that our cost function is correct by testing it with different inputs."
    },
    "equation-5": {
        "tex": "f\\left(0, 1, 0, 0\\right)=-3",
        "alttext": "f(0,1,0,0)=-3"
    },
    "equation-6": {
        "tex": "f\\left(1, 0, 1, 0\\right)=-4",
        "alttext": "f(1,0,1,0)=-4"
    },
    "equation-7": {
        "tex": "f\\left(0, 1, 1, 1\\right)=-3",
        "alttext": "f(0,1,1,1)=-3"
    },
    "equation-8": {
        "tex": "f\\left(1, 1, 1, 1\\right)=0",
        "alttext": "f(1,1,1,1)=0"
    },
    "paragraph-13": {
        "text": "Try to read out the optimal occupancies from ready-made QUBO equations by yourself!"
    },
    "interactive-1": {
        
    },
    "paragraph-14": {
        "text": "To be able to formulate an optimization problem as a QUBO problem is the **only** and **most important** prerequisite to be able to solve it on a quantum annealer. This step often requires some thought; but once it's done, it's half the battle! The following lections give enough examples and opportunities to practice this."
    }
}