{
    "sectiontitle-1": {
        "title": "Converting to a QUBO problem"
    },
    "paragraph-1": {
        "text": "The first step, as always, is to find a valid cost function that yields the least value exactly when all the rules of Sudoku are followed. By now you should have some practice in setting up QUBO problems and may recognize that, similar to the N queens problem, this one is also structured as a **grid** that we can assign named qubits to. As an example for this lecture, let's take the following incomplete Sudoku of size 4×4:"
    },
    "image-1": {
        "asset": "assets/images/lessons/sudoku_easy.png",
        "caption": "This is the simplest possible Sudoku size",
        "alttext": "Square of numbers, size four by four fields, with their horizontal and vertical center dividing line thickly marked; some boxes contain a digit from one to four in thick brown type."
    },
    "paragraph-2": {
        "text": "But what about the different digits? Here, in contrast to QUBO, not only the binary numbers 0 and 1, but digits from 1 to 4 can be filled in. These can be understood as a kind of additional \"dimension\" of the problem. And this is exactly the solution: We extend our QUBO square into **three dimensions** with additional levels!"
    },
    "image-2": {
        "asset": "assets/images/lessons/variables_stack.png",
        "caption": "To represent different digits, the Sudoku field can be divided into multiple levels",
        "alttext": "Number grid of size four by four fields with numerals from one to four in thick brown lettering; next to it, perspective view of a stack of four grids of the same size above one another, with fields labeled q one through q sixty-four."
    },
    "paragraph-3": {
        "text": "This time, the boxes are not named alphabetically, but with $$q_1$$ to $$q_{64}$$, simply because otherwise we would be running out of letters. Each of these levels represents a digit from 1 to 4 and contains 1 in a field if the corresponding digit is present **at this position** in the Sudoku. Thus, this technique is a variation of the one-hot encoding already discussed, where each digit is represented as a combination of 4 binary numbers: 1 is $$[1, 0, 0, 0]$$, 2 is $$[0, 1, 0, 0]$$, etc."
    },
    "image-3": {
        "asset": "assets/images/lessons/one_hot_encoding.png",
        "caption": "This is what the one-hot-encoded stack would look like for our 4×4 example Sudoku; if there is a 1 in level 2, then there is a 2 in the corresponding field in the original, and so on",
        "alttext": "Perspective view of a stack of four grids of size four by four on top of each other, with some squares empty and other squares filled with the digits zero and one."
    },
    "paragraph-4": {
        "text": "Using this we can already formulate our QUBO equation. Since the full formula would be much too long to show here at once, only the instructions are given to implement the Sudoku rules in QUBO. These individual parts, should they be formulated, are simply added together to get the final cost function."
    },
    "paragraph-5": {
        "text": "- Each cell must contain exactly one digit:"
    },
    "equation-1": {
        "tex": "(q_1+q_2+q_3+q_4-1)^2+(q_5+q_6+q_7+q_8-1)^2+\\hdots",
        "alttext": "(q₁+q₂+q₃+q₄-1)²+(q₅+q₆+q₇+q₈-1)²+⋯"
    },
    "paragraph-6": {
        "text": "- In each row and column, each digit must occur exactly once:"
    },
    "equation-2": {
        "tex": "(q_1+q_5+q_9+q_{13}-1)^2+(q_2+q_6+q_{10}+q_{14}-1)^2+\\hdots",
        "alttext": "(q₁+q₅+q₉+q₁₃-1)²+(q₂+q₆+q₁₀+q₁₄-1)²+⋯"
    },
    "equation-3": {
        "tex": "(q_1+q_{17}+q_{33}+q_{49}-1)^2+(q_2+q_{18}+q_{34}+q_{50}-1)^2+\\hdots",
        "alttext": "(q₁+q₁₇+q₃₃+q₄₉-1)²+(q₂+q₁₈+q₃₄+q₅₀-1)²+⋯"
    },
    "paragraph-7": {
        "text": "- Each digit must occur exactly once per 2×2 sub-square:"
    },
    "equation-4": {
        "tex": "(q_1+q_5+q_{17}+q_{21}-1)^2+(q_2+q_6+q_{18}+q_{22}-1)^2+\\hdots",
        "alttext": "(q₁+q₅+q₁₇+q₂₁-1)²+(q₂+q₆+q₁₈+q₂₂-1)²+⋯"
    },
    "paragraph-8": {
        "text": "- Already given fields must not be changed (i.e. occupying digits other than those entered will be penalized with high costs):"
    },
    "equation-5": {
        "tex": "64\\times q_5+64\\times q_7+64\\times q_8+64\\times q_{13}+64\\times q_{14}+64\\times q_{16}+\\hdots",
        "alttext": "64×q₅+64×q₇+64×q₈+64×q₁₃+64×q₁₄+64×q₁₆+⋯"
    },
    "paragraph-9": {
        "text": "Here is a snippet from the Hamiltonian and a visualization of the whole matrix:"
    },
    "image-4": {
        "asset": "assets/images/lessons/sudoku_hamiltonian.png",
        "caption": "The completed Hamilton matrix of the 4x4 Sudoku problem",
        "alttext": "Section of a matrix of real numbers whose lower triangular half is filled with zeros and has regular arrangements of two, four, minus four, and sixty-four in the upper triangular half."
    },
    "image-5": {
        "asset": "assets/images/lessons/sudoku_hamiltonian_visualization.png",
        "caption": "In the visualization, stripe patterns of different brightness, arranged in a pyramid-like pattern, are visible",
        "alttext": "Gray square with blue and yellow boxes forming a pattern with long and shorter diagonal lines in triangular arrangement."
    },
    "sectiontitle-2": {
        "title": "But it could be better"
    },
    "paragraph-10": {
        "text": "Pretty big, isn't it? Here we have taken a very simple Sudoku as an example, which is not even half the size of the classical variant. The way we formulate our QUBO equation is formally correct with the right minimum, but **drastically inefficient**. If $$n$$ is the size of the Sudoku field, the modeling already demands $$n\\times n\\times n=n^3$$ logical qubits, which requires $$(n^3)^2=n^6$$ physical qubits — a horrendous growth. A 9×9 Sudoku would require a Hamiltonian of size **729**."
    },
    "paragraph-11": {
        "text": "The way we have chosen so far is therefore also called **naive approach**; for an actual practical application this is often insufficient, especially for more complex problems. Instead of modeling the problem in general, it is advisable to optimize right away and include only qubits that are really needed. What might such an optimization look like?"
    },
    "paragraph-12": {
        "text": "First, all qubits belonging to cells that are already filled in the given Sudoku are removed. Since they are not to be processed anyway, they consume capacity unnecessarily. Then the method can be adapted to how us humans would solve a Sudoku puzzle: cross out **excluded options** in the empty fields. An example of this is shown in the following figure; in the top left cell, for example, only a 4 is possible because the associated row already contains the 2 and the 3 and the first column contains a 1."
    },
    "image-6": {
        "asset": "assets/images/lessons/exclude_digits.png",
        "caption": "With the help of the given entries we can eliminate many possibilities",
        "alttext": "Number square of size four by four fields; some boxes contain a digit from one to four in thick, brown lettering, the other boxes each contain four circles numbered one to four, some of which are crossed out."
    },
    "paragraph-13": {
        "text": "What remains is only a handful of options, 11 total in our example. We can consider these as our new qubits and name them according to the scheme $$q_{xyz}$$ ($$x$$ = row index, $$y$$ = column index, $$z$$ = digit of the option). Thus, we have reduced the required number of qubits from 64 to 11. The last step is to mark the pairs of qubits that, according to the Sudoku rules, **must not occur together** in the solution:"
    },
    "image-7": {
        "asset": "assets/images/lessons/qubit_relationships.png",
        "caption": "The arrows each point to a pair of qubits that exclude each other, e.g. because they represent the same digit in the same row/column",
        "alttext": "Number square of size four by four fields; some boxes contain a digit from one to four in thick brown font, the other boxes contain variables named q and two-ended blue arrows each pointing to two different variables."
    },
    "paragraph-14": {
        "text": "Entering digits in general should be rewarded by negative coefficients, but pairs that violate the rules should be subject to a positive penalty. Now we just have to enter the coefficients into the Hamilton matrix - and we're done!"
    },
    "image-8": {
        "asset": "assets/images/lessons/optimized_hamiltonian.png",
        "caption": "The final, optimized Sudoku Hamiltonian",
        "alttext": "Number table of size eleven by eleven cells, whose rows and columns are labeled with numbered q variables; filled with zeros, in the main diagonal with minus one, and in the upper half of the triangle sporadically with ones."
    },
    "paragraph-15": {
        "text": "This procedure is a prime example of how a QUBO problem can be optimized if one does not lose track of which solutions are allowed and which are not. The finished matrix is almost **36 times smaller** than the previous one and is relatively sparse, so the quantum annealer should be able to solve it more easily. Optimization by the exclusion method is more effective the more entries are given in the original Sudoku."
    }
}