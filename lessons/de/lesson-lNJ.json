{
    "sectiontitle-1": {
        "title": "Wie findet man die QUBO-Regeln?"
    },
    "paragraph-1": {
        "text": "Ähnlich wie beim N-Damen-Problem ist es ratsam, **Muster und Regelmäßigkeiten** in der gewählten Darstellungsform zu suchen. Aus der Tour-Matrix lassen sich folgende Regeln für die Belegung ableiten:"
    },
    "paragraph-2": {
        "text": "1. Es ist **genau eine** Belegung pro Zeile erlaubt (da es nicht möglich ist, eine Stadt zwei- oder mehrmal zu besuchen)\n2. Es ist **genau eine** Belegung pro Spalte erlaubt (da es nicht möglich ist, mehrere Städte gleichzeitig zu besuchen)"
    },
    "paragraph-3": {
        "text": "Betrachten wir unsere Matrix erneut als 4×4-Gitter, dessen Felder in alphabetischer Reihenfolge benannt sind. Mittlerweile sind wir schon geübt darin, die obigen Regeln als QUBO-Gleichung umzusetzen!"
    },
    "image-1": {
        "asset": "tour_matrix_variables.png",
        "caption": "Eine Tour-Matrix mit Variablen als Felder",
        "alttext": "Gitter, dessen Spalten mit eins, zwei, drei, vier und dessen Zeilen mit A, B, C, D beschriftet sind; die Felder sind von links oben nach rechts unten in alphabetischer Reihenfolge mit a bis p beschriftet."
    },
    "equation-1": {
        "tex": "f\\left(a,...,p\\right)=\\left(a+b+c+d-1\\right)^2+\\left(e+f+g+h-1\\right)^2+\\left(i+j+k+l-1\\right)^2+\\left(m+n+o+p-1\\right)^2+\\left(a+e+i+m-1\\right)^2+\\left(b+f+j+n-1\\right)^2+\\left(c+g+k+o-1\\right)^2+\\left(d+h+l+p-1\\right)^2=-2a+2ab+2ac+2ad+2ae+2ai+2am-2b+2bc+2bd+2bf+2bj+2bn-2c+2cd+2cg+2ck+2co-2d+2dh+2dl+2dp-2e+2ef+2eg+2eh+2ei+2em-2f+2fg+2fh+2fj+2fn-2g+2gh+2gk+2go-2h+2hl+2hp-2i+2ij+2ik+2il+2im-2j+2jk+2jl+2jn-2k+2kl+2ko-2l+2lp-2m+2mn+2mo+2mp-2n+2no+2np-2o+2op-2p+8",
        "alttext": "f(a,...,p)=(a+b+c+d-1)²+(e+f+g+h-1)²+(i+j+k+l-1)²+(m+n+o+p-1)²+left(a+e+i+m-1)²+(b+f+j+n-1)²+(c+g+k+o-1)²+(d+h+l+p-1)²=-2a+2ab+2ac+2ad+2ae+2ai+2am-2b+2bc+2bd+2bf+2bj+2bn-2c+2cd+2cg+2ck+2co-2d+2dh+2dl+2dp-2e+2ef+2eg+2eh+2ei+2em-2f+2fg+2fh+2fj+2fn-2g+2gh+2gk+2go-2h+2hl+2hp-2i+2ij+2ik+2il+2im-2j+2jk+2jl+2jn-2k+2kl+2ko-2l+2lp-2m+2mn+2mo+2mp-2n+2no+2np-2o+2op-2p+8"
    },
    "sectiontitle-2": {
        "title": "Und was ist mit den Wegkosten?"
    },
    "paragraph-4": {
        "text": "Aber das ist nur die halbe Miete. Da es auch unser Ziel ist, die **Länge der Tour zu minimieren**, müssen auch die Streckenkosten in der QUBO-Gleichung berücksichtigt werden. Da es sich hierbei glücklicherweise ebenfalls um eine Kostenfunktion handelt, können die Werte übernommen und zu den Gesamtkosten addiert werden. Aber wie bestimmt man, welche Werte man wann hinzufügt?"
    },
    "image-2": {
        "asset": "tour_costs.png",
        "caption": "Alle Möglichkeiten, von Stadt B in andere Städte zu kommen, unabhängig vom Zeitpunkt.",
        "alttext": "Das vorherige Gitter mit alphabetischer Beschriftung, wo von jedem Feld der zweiten Reihe aus Pfeile zu allen Feldern aus der jeweils nächsten Spalte, die nicht zur zweiten Zeile gehören, zeigen."
    },
    "paragraph-5": {
        "text": "Eine bestimmte Kante wird genau dann befahren, wenn ihr **Anfangsknoten** in einer Spalte und ihr **Zielknoten** in der darauffolgenden Spalte belegt sind. Die Pfeile stellen hier alle Kanten dar, die von der Stadt B zu anderen Knoten führen. Da wir anfangs nicht wissen, wann wir B besuchen werden, muss dies für alle Zeitschritte wiederholt werden."
    },
    "paragraph-6": {
        "text": "Die Kante $$\\overline{BA}$$ mit den Kosten von 6,6 entspricht zum Beispiel $$(e,b)$$, $$(f,c)$$, $$(g,d)$$ und $$(h,a)$$. Wenn wir den Kostenbetrag mit diesen Variablenpaaren multiplizieren (dies ist mit den Regeln von QUBO-Problemen vereinbar), wird sie nur addiert, wenn beide Felder besucht werden, d.h. gleich 1 sind. Außerdem besteht keine Gefahr, die Kosten für eine bestimmte Kante mehr als einmal zu addieren: Da es verboten ist, eine Stadt mehr als einmal zu besuchen, wird bei einer gültigen Belegung, wenn überhaupt, nur einer dieser vier Fälle eintreten. So sieht also die zweite Hälfte der QUBO-Gleichung aus:"
    },
    "equation-2": {
        "tex": "6.6af+6.6bg+6.6ch+6.6de+5.4aj+5.4bk+5.4cl+5.4di+4.0an+4.0bo+4.0cp+4.0dm+6.6eb+6.6fc+6.6gd+6.6ha+1.6ej+1.6fk+1.6gl+1.6hi+3.6en+3.6fo+3.6gp+3.6hm+5.4ib+5.4jc+5.4kd+5.4la$+1.6if+1.6jg+1.6kh+1.6le+3.2in+3.2jo+3.2kp+3.2lm+4.0mb+4.0nc+4.0od+4.0pa+3.6mf+3.6ng+3.6oh+3.6pe+3.2mj+3.2nk+3.2ol+3.2pi"
    },
    "sectiontitle-3": {
        "title": "Ein kleiner Haken"
    },
    "paragraph-7": {
        "text": "Dieser Teil wird einfach zum Rest der Gleichung hinzugefügt und muss für jede TSP-Instanz **neu generiert** werden. Es gibt aber noch ein Problem. Würde man das QUBO-Problem schon zum jetzigen Zeitpunkt an den Quantenannealer senden, sähen die Ergebnisse ungefähr so aus:"
    },
    "image-3": {
        "asset": "tsp_results.png",
        "caption": "Die Lösungsvektoren des Quantenannealers für die jetzige QUBO-Gleichung",
        "alttext": "Tabelle mit fünf Zeilen, die jeweils 16 binäre Zahlen beinhalten, von denen immer drei Stück Eins und der Rest Null sind; zweite Spalte ist beschriftet mit Energie, die immer minus vier beträgt."
    },
    "paragraph-8": {
        "text": "Die Tabelle zeigt die besten fünf aus den Ergebnissen des DWave-Annealers. Alle davon besuchen nur **drei oder noch weniger** Städte. Das liegt daran, dass die Koeffizienten, die den Annealer zwingen, die Regel \"Genau eine Belegung pro Zeile/Spalte\" zu befolgen, -2 oder 2 sind – zu klein im Vergleich zu den Entfernungen zwischen den Knoten, die zwischen 3 und 7 liegen. Wenn der Annealer weniger Zellen belegt, **überwiegt** die Energie, die er durch das Weglassen von Kanten spart, bei weitem die Strafe, die er für den Besuch weniger Städte erhält."
    },
    "paragraph-9": {
        "text": "Um dieses Problem zu lösen, müssen wir unsere Koeffizienten entsprechend skalieren: Wenn wir alle Koeffizienten mit demselben Faktor multiplizieren, bleiben die Beziehungen erhalten, was bedeutet, dass wir bestimmte Teile der Gleichung skalieren können, um diese stärker zu **gewichten**. Als allgemeine Faustregel gilt: Wenn $$s$$ = die Länge der längsten möglichen Tour im Graphen und $$n$$ = die Anzahl der Städte ist, sollten alle Koeffizienten $$h_{ij}$$ aus der ersten Hälfte der QUBO-Gleichung nach dieser Formel berechnet werden:"
    },
    "equation-3": {
        "tex": "h_{ij}=\\frac{\\left(\\frac{3\\times s}{n}\\right)}{2}",
        "alttext": "hᵢⱼ=((3×s)/n)/2"
    },
    "paragraph-10": {
        "text": "Diese Kostenfunktion sollte nun die beste (niedrigste) Energie liefern, wenn die formalen Regeln der Belegung, d.h. 1 pro Zeile und 1 pro Spalte, erfüllt sind **und** der Quantenannealer diejenigen Verbindungen auswählt, deren Summe gemäß den TSP-Anforderungen am kürzesten ist."
    },
    "image-4": {
        "asset": "tsp_hamiltonian.png",
        "caption": "Die fertige Hamilton-Matrix des TSP",
        "alttext": "Ausschnitt aus einer Matrix, einmal mit Buchstaben als Variablennamen und einmal mit reellen Zahlenwerten ausgefüllt"
    },
    "image-5": {
        "asset": "tsp_visualization.png",
        "caption": "Visuell dargestellt weist der Hamiltonian ein typisches Muster mit diagonalen Streifen auf",
        "alttext": "Graues Quadrat mit blauen und gelben Kästchen, die ein Muster mit durchgezogenen diagonalen Linien bilden."
    },
    "sectiontitle-4": {
        "title": "Alles kommt zusammen"
    },
    "paragraph-11": {
        "text": "Mit der nun angepassten Hamilton-Matrix lässt sich auch das TSP aus unserem ursprünglichen Beispiel lösen. Schickt man diese an den DWave Advantage, ist die beste Lösung der folgende Antwortvektor:"
    },
    "equation-4": {
        "tex": "\\vec{q}_A=\\left[0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0\\right]",
        "alttext": "qₐ=[0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0]"
    },
    "paragraph-12": {
        "text": "Doch wie kommen wir daraus wieder an die Tour auf dem Graphen? Dieser Prozess nennt sich **reverse engineering** (\"umgekehrtes Entwickeln\"). Der Antwortvektor $$q_A$$ (der die Werte der Variablen a bis n beinhaltet) muss zunächst in die Tourmatrix übersetzt werden, indem die Werte nacheinander in ein 4×4-Gitter übertragen werden."
    },
    "image-6": {
        "asset": "solution_matrix.png",
        "caption": "Die Tourmatrix, der die Werte aus dem Antwortvektor beinhaltet",
        "alttext": "Zahlengitter gefüllt mit Nullen, dessen Spalten mit eins, zwei, drei, vier und dessen Zeilen mit A, B, C, D beschriftet sind; bei 1D, 2B, 3C und 4A ist jeweils eine Eins eingetragen."
    },
    "paragraph-13": {
        "text": "Durch das Hinzufügen der Zeitschritt- und Städtebezeichnungen wird die Reihenfolge der besuchten Städte sichtbar: D – B – C – A (– D). Werfen wir noch einmal einen Blick auf den Graphen: Tatsächlich, er hat den kürzesten Weg gefunden!"
    },
    "image-7": {
        "asset": "solution_tour.png",
        "caption": "Korrekte Lösung des TSP-Problems aus der letzten Einheit, visualisiert am Graphen",
        "alttext": "Vier bunte Kreise beschriftet mit A, B, C und D, durch graue Linien ist jedes miteinander verbunden; Verbindung von A nach D nach B nach C und zurück nach A ist rosa hervorgehoben."
    }
}